// Shared Gradle configuration for the Sponge implementation projects

ext.common = project(':SpongeCommon')
// Finish configuring SpongeCommon first
evaluationDependsOn common.path

// Apply shared ForgeGradle configuration
apply from: common.file('gradle/minecraft.gradle')

ext.apiSuffix = (api.version - '-SNAPSHOT') + '-BETA'

dependencies {
    compile common
    compile common.sourceSets.java6.output
}

// Include only asm-debug-all in the workspace
configurations.compile {
    exclude module: 'asm'
    exclude module: 'asm-commons'
    exclude module: 'asm-tree'
}

// Add Common access transformers
minecraft {
    atSource common.sourceSets.main
}

jar {
    classifier = 'base'
}

// Apply shadow plugin to include the dependencies in the JAR
apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    // Clear the current source set
    // TODO: Find a better way for this, will likely break in the future
    mainSpec.sourcePaths.clear()

    // Make sure SpongeCommon was actually reobfuscated before shading it
    dependsOn reobfJar
    dependsOn common.tasks.reobfJar

    classifier = ''

    // Wait for reobf task to be fully configured
    afterEvaluate {
        // Include obfuscated classes
        from zipTree(reobfJar.jar)
    }
}

shadowJar ext.shadowConfiguration = {
    dependencies {
        // SpongeCommon and Mixin
        include project(common.path)
        include dependency('org.spongepowered:mixin')

        // SpongeAPI and event generation
        include project(api.path)
        include dependency('org.spongepowered:event-gen-core')

        include dependency('org.spongepowered:plugin-meta')

        // Include all other dependencies
        include dependency('org.slf4j:slf4j-api')
        include dependency('org.apache.logging.log4j:log4j-slf4j-impl')

        include dependency('com.google.inject:guice')
        include dependency('javax.inject:javax.inject')
        include dependency('aopalliance:aopalliance')

        include dependency('com.flowpowered:flow-math')
        include dependency('com.flowpowered:flow-noise')

        include dependency('ninja.leaping.configurate:configurate-core')
        include dependency('ninja.leaping.configurate:configurate-hocon')
        include dependency('ninja.leaping.configurate:configurate-gson')
        include dependency('ninja.leaping.configurate:configurate-yaml')

        include dependency('org.yaml:snakeyaml')

        include dependency('com.zaxxer:HikariCP')

        include dependency('org.mariadb.jdbc:mariadb-java-client')
        include dependency('com.h2database:h2')
        include dependency('org.xerial:sqlite-jdbc')

        include dependency('com.github.ben-manes.caffeine:caffeine')
        include dependency('com.github.ben-manes.caffeine:guava')
    }

    from(zipTree(common.configurations.fastutil.first())) {
        include 'it/unimi/dsi/fastutil/bytes/AbstractByte2ObjectFunction*'
        include 'it/unimi/dsi/fastutil/bytes/AbstractByte2ObjectMap*'
        include 'it/unimi/dsi/fastutil/bytes/AbstractByteBidirectionalIterator*'
        include 'it/unimi/dsi/fastutil/bytes/AbstractByteCollection*'
        include 'it/unimi/dsi/fastutil/bytes/AbstractByteIterator*'
        include 'it/unimi/dsi/fastutil/bytes/AbstractByteList*'
        include 'it/unimi/dsi/fastutil/bytes/AbstractByteListIterator*'
        include 'it/unimi/dsi/fastutil/bytes/AbstractByteSet*'
        include 'it/unimi/dsi/fastutil/bytes/Byte2ObjectFunction*'
        include 'it/unimi/dsi/fastutil/bytes/Byte2ObjectMap*'
        include 'it/unimi/dsi/fastutil/bytes/Byte2ObjectOpenHashMap*'
        include 'it/unimi/dsi/fastutil/bytes/ByteArrayList*'
        include 'it/unimi/dsi/fastutil/bytes/ByteArrays*'
        include 'it/unimi/dsi/fastutil/bytes/ByteBidirectionalIterator*'
        include 'it/unimi/dsi/fastutil/bytes/ByteCollection*'
        include 'it/unimi/dsi/fastutil/bytes/ByteComparator*'
        include 'it/unimi/dsi/fastutil/bytes/ByteIterable*'
        include 'it/unimi/dsi/fastutil/bytes/ByteIterator*'
        include 'it/unimi/dsi/fastutil/bytes/ByteIterators*'
        include 'it/unimi/dsi/fastutil/bytes/ByteList*'
        include 'it/unimi/dsi/fastutil/bytes/ByteListIterator*'
        include 'it/unimi/dsi/fastutil/bytes/ByteSet*'
        include 'it/unimi/dsi/fastutil/bytes/ByteStack*'
        include 'it/unimi/dsi/fastutil/ints/IntOpenHashSet*'
        include 'it/unimi/dsi/fastutil/objects/AbstractObject2IntFunction*'
        include 'it/unimi/dsi/fastutil/objects/AbstractObject2IntMap*'
        include 'it/unimi/dsi/fastutil/objects/AbstractObject2LongFunction*'
        include 'it/unimi/dsi/fastutil/objects/AbstractObject2LongMap*'
        include 'it/unimi/dsi/fastutil/objects/Object2IntFunction*'
        include 'it/unimi/dsi/fastutil/objects/Object2IntMap*'
        include 'it/unimi/dsi/fastutil/objects/Object2IntOpenHashMap*'
        include 'it/unimi/dsi/fastutil/objects/Object2LongFunction*'
        include 'it/unimi/dsi/fastutil/objects/Object2LongMap*'
        include 'it/unimi/dsi/fastutil/objects/Object2LongOpenHashMap*'
        include 'it/unimi/dsi/fastutil/shorts/AbstractShort2ObjectFunction*'
        include 'it/unimi/dsi/fastutil/shorts/AbstractShort2ObjectMap*'
        include 'it/unimi/dsi/fastutil/shorts/AbstractShort2ObjectSortedMap*'
        include 'it/unimi/dsi/fastutil/shorts/AbstractShort2BidirectionalIterator*'
        include 'it/unimi/dsi/fastutil/shorts/AbstractShortCollection*'
        include 'it/unimi/dsi/fastutil/shorts/AbstractShortComparator*'
        include 'it/unimi/dsi/fastutil/shorts/AbstractShortIterator*'
        include 'it/unimi/dsi/fastutil/shorts/AbstractShortList*'
        include 'it/unimi/dsi/fastutil/shorts/AbstractShortListIterator*'
        include 'it/unimi/dsi/fastutil/shorts/AbstractShortSet*'
        include 'it/unimi/dsi/fastutil/shorts/AbstractShortSortedSet*'
        include 'it/unimi/dsi/fastutil/shorts/Short2ObjectArrayMap*'
        include 'it/unimi/dsi/fastutil/shorts/Short2ObjectFunction*'
        include 'it/unimi/dsi/fastutil/shorts/Short2ObjectFunctions*'
        include 'it/unimi/dsi/fastutil/shorts/Short2ObjectLinkedOpenHashMap*'
        include 'it/unimi/dsi/fastutil/shorts/Short2ObjectMap*'
        include 'it/unimi/dsi/fastutil/shorts/Short2ObjectOpenCustomHashMap*'
        include 'it/unimi/dsi/fastutil/shorts/Short2ObjectOpenHashMap*'
        include 'it/unimi/dsi/fastutil/shorts/Short2ObjectSortedMap*'
        include 'it/unimi/dsi/fastutil/shorts/ShortArrayList*'
        include 'it/unimi/dsi/fastutil/shorts/ShortArrays*'
        include 'it/unimi/dsi/fastutil/shorts/ShortArraySet*'
        include 'it/unimi/dsi/fastutil/shorts/ShortBidirectionalIterator*'
        include 'it/unimi/dsi/fastutil/shorts/ShortCollection*'
        include 'it/unimi/dsi/fastutil/shorts/ShortCollections*'
        include 'it/unimi/dsi/fastutil/shorts/ShortComparator*'
        include 'it/unimi/dsi/fastutil/shorts/ShortHash*'
        include 'it/unimi/dsi/fastutil/shorts/ShortIterable*'
        include 'it/unimi/dsi/fastutil/shorts/ShortIterator*'
        include 'it/unimi/dsi/fastutil/shorts/ShortIterators*'
        include 'it/unimi/dsi/fastutil/shorts/ShortList*'
        include 'it/unimi/dsi/fastutil/shorts/ShortListIterator*'
        include 'it/unimi/dsi/fastutil/shorts/ShortSet*'
        include 'it/unimi/dsi/fastutil/shorts/ShortSets*'
        include 'it/unimi/dsi/fastutil/shorts/ShortSortedSet*'
        include 'it/unimi/dsi/fastutil/shorts/ShortStack*'
    }

    // Exclude ForgeGradle classes from shaded JAR
    exclude 'dummyThing'
    exclude 'Version.java.template'

    // Prevent other dependencies replacing our license file
    exclude 'LICENSE', 'NOTICE'

    // We include multiple JDBC drivers, so we need to merge the service file to enable them all
    mergeServiceFiles()
}

artifacts {
    archives shadowJar
}

sourceJar {
    // Include SpongeCommon sources
    from common.sourceSets.main.allSource
    from common.sourceSets.java6.allSource
}

devJar {
    // Include SpongeCommon
    from common.sourceSets.main.output
    from common.sourceSets.java6.output
}

// Include SpongeCommon dependencies in our POM
ext.shadedDevProject = common

// Eclipse is too stupid to order the classpath correctly unfortunately...
// Put SpongeAPI and SpongeCommon last
eclipse {
    classpath {
        file {
            whenMerged { classpath ->
                def libs = classpath.entries.findAll { it.path.endsWith('SpongeCommon') || it.path.endsWith('SpongeAPI') }
                def others = classpath.entries - libs
                others.removeAll { it.path.contains('SpongeCommon') && it.path.contains('java6') }
                classpath.entries = others + libs
            }
        }
    }
}
